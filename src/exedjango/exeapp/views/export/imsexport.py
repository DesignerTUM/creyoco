# ===========================================================================
# eXe 
# Copyright 2004-2005, University of Auckland
# Copyright 2004-2008 eXe Project, http://eXeLearning.org/
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
# ===========================================================================
import tempfile
from django.conf import settings
from django.forms.models import model_to_dict
from exeapp.models.idevices.idevice import Idevice
"""
Exports an eXe package as an IMS Content Package
"""

import logging
import re
from zipfile                       import ZipFile, ZIP_DEFLATED
from exedjango.utils import common
#from exe.webui.blockfactory        import g_blockFactory
#from exe.engine.error              import Error
from utils.path import Path 
from exeapp.views.export.pages import Page, uniquifyNames
from exeapp.views.blocks.blockfactory import block_factory
from utils.uniqueidgenerator import UniqueIdGenerator

log = logging.getLogger(__name__)

_ = lambda x : x


# ===========================================================================
class Manifest(object):
    """
    Represents an imsmanifest xml file
    """
    def __init__(self, outputDir, package, pages):
        """
        Initialize
        'outputDir' is the directory that we read the html from and also output
        the mainfest.xml 
        """
        self.outputDir    = outputDir
        self.package      = package
        self.idGenerator  = UniqueIdGenerator(package.title, settings.STATIC_ROOT)
        self.pages        = pages
        self.itemStr      = ""
        self.resStr       = ""


    def save(self):
        """
        Save a imsmanifest file and metadata to self.outputDir
        """
        filename = "imsmanifest.xml"
        out = open(self.outputDir/filename, "wb")
        out.write(self.createXML().encode('utf8'))
        out.close()
        # if user did not supply metadata title, description or creator
        #  then use package title, description, or creator in imslrm
        #  if they did not supply a package title, use the package name
        lrm = model_to_dict(self.package.dublincore)
        if lrm.get('title', '') == '':
            lrm['title'] = self.package.title
        if lrm['title'] == '':
            lrm['title'] = self.package.name
        if lrm.get('description', '') == '':
            lrm['description'] = self.package.description
        if lrm['description'] == '':
            lrm['description'] = self.package.title
        if lrm.get('creator', '') == '':
            lrm['creator'] = self.package.author
        # Metadata
        templateFilename = Path(settings.STATIC_ROOT)/'templates'/'dublincore.xml'
        template = open(templateFilename, 'rb').read()
        xml = template % lrm
        out = open(self.outputDir/'dublincore.xml', 'wb')
        out.write(xml.encode('utf8'))
        out.close()

    def createXML(self):
        """
        returning XLM string for manifest file
        """
        manifestId = self.idGenerator.generate()
        orgId      = self.idGenerator.generate()
        
        xmlStr = u"""<?xml version="1.0" encoding="UTF-8"?>
        <!-- generated by eXe - http://exelearning.org -->
        <manifest identifier="%s" 
        xmlns="http://www.imsglobal.org/xsd/imscp_v1p1"
        xmlns:adlcp="http://www.adlnet.org/xsd/adlcp_rootv1p2" 
        xmlns:imsmd="http://www.imsglobal.org/xsd/imsmd_v1p2" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        """ % manifestId 

        xmlStr += "\n "
        xmlStr += "xsi:schemaLocation=\"http://www.imsglobal.org/xsd/"
        xmlStr += "imscp_v1p1 imscp_v1p1.xsd "        
        xmlStr += "http://www.imsglobal.org/xsd/imsmd_v1p2 imsmd_v1p2p2.xsd\""
        xmlStr += "> \n"
        xmlStr += "<metadata> \n"
        xmlStr += " <schema>IMS Content</schema> \n"
        xmlStr += " <schemaversion>1.1.3</schemaversion> \n"
        xmlStr += " <adlcp:location>dublincore.xml"
        xmlStr += "</adlcp:location> \n" 
        xmlStr += "</metadata> \n"
        xmlStr += "<organizations default=\""+orgId+"\">  \n"
        xmlStr += "<organization identifier=\""+orgId
        xmlStr += "\" structure=\"hierarchical\">  \n"

        if self.package.title != '':
            title = self.package.title
        else:
            title  = self.package.root.titleShort
        xmlStr += u"<title>"+title+"</title>\n"
        
        depth = 0
        for page in self.pages:
            while depth >= page.depth:
                self.itemStr += "</item>\n"
                depth -= 1
            self.genItemResStr(page)
            depth = page.depth

        while depth >= 1:
            self.itemStr += "</item>\n"
            depth -= 1

        xmlStr += self.itemStr
        xmlStr += "</organization>\n"
        xmlStr += "</organizations>\n"
        xmlStr += "<resources>\n"
        xmlStr += self.resStr
        xmlStr += "</resources>\n"
        xmlStr += "</manifest>\n"
        return xmlStr
        
            
    def genItemResStr(self, page):
        """
        Returning xml string for items and resources
        """
        itemId   = "ITEM-"+unicode(self.idGenerator.generate())
        resId    = "RES-"+unicode(self.idGenerator.generate())
        filename = page.name+".html"
            
        
        self.itemStr += "<item identifier=\""+itemId+"\" isvisible=\"true\" "
        self.itemStr += "identifierref=\""+resId+"\">\n"
        self.itemStr += "    <title>"
        self.itemStr += page.node.titleShort
        self.itemStr += "</title>\n"
        
        self.resStr += "<resource identifier=\""+resId+"\" "
        self.resStr += "type=\"webcontent\" "

        self.resStr += "href=\""+filename+"\"> \n"
        self.resStr += """\
    <file href="%s"/>
    <file href="base.css"/>
    <file href="content.css"/>""" % filename
        self.resStr += "\n"
        fileStr = ""

        for resource in page.node.getResources():
            fileStr += "    <file href=\""+resource+"\"/>\n"

        self.resStr += fileStr
        self.resStr += "</resource>\n"


# ===========================================================================
class IMSPage(Page):
    """
    This class transforms an eXe node into a SCO 
    """
    def save(self, outputDir):
        """
        This is the main function.  It will render the page and save it to a
        file.  
        'outputDir' is the name of the directory where the node will be saved to,
        the filename will be the 'self.node.id'.html or 'index.html' if
        self.node is the root node. 'outputDir' must be a 'Path' instance
        """
        out = open(outputDir/self.name+".html", "w")
        out.write(self.render())
        out.close()
        

    def render(self):
        """
        Returns an XHTML string rendering this page.
        """
        html  = common.docType()
        html += u"<html xmlns=\"http://www.w3.org/1999/xhtml\">\n"
        html += u"<head>\n"
        html += u"<meta http-equiv=\"Content-type\" content=\"text/html; "
        html += u" charset=utf-8\" />\n";
        html += u"<title>"+_("eXe")+"</title>\n"
        html += u"<style type=\"text/css\">\n"
        html += u"@import url(base.css);\n"
        html += u"@import url(content.css);\n"
        html += u"</style>\n"
        html += u'<script type="text/javascript" src="common.js"></script>\n'
        html += u"</head>\n"
        html += u"<body>\n"
        html += u"<div id=\"outer\">\n"
        html += u"<div id=\"main\">\n"
        html += u"<div id=\"nodeDecoration\">\n"
        html += u'<p id=\"nodeTitle\">\n'
        html += self.node.titleLong
        html += u'</p>\n'
        html += u"</div>\n"

        for idevice in self.node.idevices.all():
            html += u'<div class="%s" id="id%s">\n' % (idevice.klass,
                    idevice.id)
            block = block_factory(idevice.as_child())
            if not block:
                log.critical("Unable to render iDevice.")
                raise Exception("Unable to render iDevice.")
            html += self.processInternalLinks(
                    block.renderView())
            html += u'</div>\n'     # iDevice div

        html += u"</div>\n"
        html += self.renderLicense()
        html += self.renderFooter()
        html += u"</div>\n"
        html += u"</body></html>\n"
        html = html.encode('utf8')
        return html


    def processInternalLinks(self, html):
        """
        take care of any internal links which are in the form of:
           href="exe-node:Home:Topic:etc#Anchor"
        For this IMS Export, go ahead and remove the link entirely,
        leaving only its text, since such links are not to be in the LMS.
        """
        return common.removeInternalLinks(html)
        
        
# ===========================================================================
class IMSExport(object):
    """
    Exports an eXe package as a SCORM package
    """
    def __init__(self, package, file_obj):
        """ Initialize
        'style_dir' is the directory from which we will copy our style sheets
        (and some gifs)
        """
        static_dir = Path(settings.STATIC_ROOT)
        self.imagesDir    = static_dir / "images"
        self.scriptsDir   = static_dir / "scripts"
        self.templatesDir = static_dir / "templates"
        self.schemasDir   = static_dir / "schemas/ims"
        self.style_dir = Path("%s/%s" % (settings.STYLE_DIR, 
                                            package.style))
        self.package = package
        self.file_obj     = file_obj
        self.pages        = []


    def exportZip(self):
        """ 
        Export SCORM package
        """
        # First do the export to a temporary directory
        outputDir = Path(tempfile.mkdtemp())

        # Copy the style sheet files to the output dir
        # But not nav.css
        styleFiles  = [self.style_dir/'..'/'base.css']
        styleFiles += [self.style_dir/'..'/'popup_bg.gif']
        styleFiles += self.style_dir.files("*.css")
        if "nav.css" in styleFiles:
            styleFiles.remove("nav.css")
        styleFiles += self.style_dir.files("*.jpg")
        styleFiles += self.style_dir.files("*.gif")
        styleFiles += self.style_dir.files("*.png")
        styleFiles += self.style_dir.files("*.js")
        styleFiles += self.style_dir.files("*.html")
        self.style_dir.copylist(styleFiles, outputDir)

        # copy the package's resource files
        # package.resourceDir.copyfiles(outputDir)
        resources = []
        media_dir = Path(settings.MEDIA_ROOT)
        # TODO lower coupling on idevices by adding get_all_idevices
        # function to package
        for idevice in Idevice.objects.filter(parent_node__package=self.package):
            resources += idevice.as_child().get_resources()
        media_dir.copylist(resources, outputDir)
            
        # Export the package content
        self.pages = [ IMSPage(self.package.root, 1)]

        self.generatePages(self.package.root, 2)
        uniquifyNames(self.pages)

        for page in self.pages:
            page.save(outputDir)

        # Create the manifest file
        manifest = Manifest(outputDir, self.package, self.pages)
        manifest.save()
        
        # Copy the scripts
        self.scriptsDir.copylist(('libot_drag.js',
                                  'common.js'), outputDir)
        
        self.schemasDir.copylist(('imscp_v1p1.xsd',
                                  'imsmd_v1p2p2.xsd',
                                  'ims_xml.xsd'), outputDir)
        
        # copy players for media idevices.                
        hasFlowplayer     = False
        hasMagnifier      = False
        hasXspfplayer     = False
        isBreak           = False
        
        for page in self.pages:
            if isBreak:
                break
            for idevice in page.node.idevices.all():
                if (hasFlowplayer and hasMagnifier and hasXspfplayer):
                    isBreak = True
                    break
                resources = idevice.as_child().get_resources()
                if not hasFlowplayer:
                    if 'flowPlayer.swf' in resources:
                        hasFlowplayer = True
                if not hasMagnifier:
                    if 'magnifier.swf' in resources:
                        hasMagnifier = True
                if not hasXspfplayer:
                    if 'xspf_player.swf' in resources:
                        hasXspfplayer = True
                        
        if hasFlowplayer:
            videofile = (self.templatesDir/'flowPlayer.swf')
            videofile.copyfile(outputDir/'flowPlayer.swf')
        if hasMagnifier:
            videofile = (self.templatesDir/'magnifier.swf')
            videofile.copyfile(outputDir/'magnifier.swf')
        if hasXspfplayer:
            videofile = (self.templatesDir/'xspf_player.swf')
            videofile.copyfile(outputDir/'xspf_player.swf')

        if self.package.license == "GNU Free Documentation License":
            # include a copy of the GNU Free Documentation Licence
            (self.templatesDir/'fdl.html').copyfile(outputDir/'fdl.html')
        # Zip it up!
        self.doZip(self.file_obj, outputDir)
        # Clean up the temporary dir
        outputDir.rmtree()

    def doZip(self, fileObj, outputDir):
        """
        Actually does the zipping of the file. Called by 'Path.safeSave'
        """
        zipped = ZipFile(fileObj, "w")
        for scormFile in outputDir.files():
            zipped.write(scormFile,
                    scormFile.basename().encode('utf8'), ZIP_DEFLATED)
        zipped.close()

    def generatePages(self, node, depth):
        """
        Recursive function for exporting a node.
        'outputDir' is the temporary directory that we are exporting to
        before creating zip file
        """
        for child in node.children.all():
            page = IMSPage(child, depth + 1)

            self.pages.append(page)
            self.generatePages(child, depth + 1)
    
# ===========================================================================
